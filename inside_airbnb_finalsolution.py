# -*- coding: utf-8 -*-
"""Inside_airbnb_finalsolution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I5sEsUsd65a54fdI-qvOQhCqZvFqftH0
"""

import pandas as pd
from sklearn.model_selection import train_test_split 
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, SimpleRNN
from keras import optimizers
import numpy as np
from tensorflow.keras.preprocessing.sequence import pad_sequences
from keras.preprocessing.text import Tokenizer
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score

fields_listings = ['id', 'review_scores_rating']
fields_reviews = ['listing_id', 'comments']

df_listings = pd.read_csv('/content/listings.csv', skipinitialspace=True, usecols=fields_listings)
df_reviews = pd.read_csv('/content/reviews.csv', skipinitialspace=True, usecols=fields_reviews)

df_reviews = df_reviews.rename(columns={'listing_id': 'id'})
print (df_reviews.head)
print (df_listings.head)

df_input = pd.merge(df_reviews, df_listings, left_on='id', right_on='id')
df_input

df_input['review_scores_rating'] = df_input['review_scores_rating']//1
df_input['review_scores_rating']=df_input['review_scores_rating'].astype('int')
df_input['comments']=df_input['comments'].astype('str')
df_input

df_input['review_scores_rating'].value_counts()

X_train, X_test, y_train, y_test = train_test_split(df_input['comments'], df_input['review_scores_rating'], test_size=0.2, random_state=101)

print(X_train[3])
print(y_train[3])

print('X train shape', X_train.shape)
print('y train shape', y_train.shape)
print('X test shape', X_test.shape)
print('y test shape', y_test.shape)

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
plt.figure();
sns.countplot(y_test);
plt.xlabel("ratings");
plt.ylabel("numbers");
plt.title("Classes in train");

tokenizer = Tokenizer(num_words=1000, lower=True)
tokenizer.fit_on_texts(X_train)

X_train = tokenizer.texts_to_sequences(X_train)
X_test = tokenizer.texts_to_sequences(X_test)

vocab_size = len(tokenizer.word_index)+1

print(X_train[3])
print(y_train[3])

max_length = 100
X_train = pad_sequences(X_train,padding='post',maxlen=max_length)
X_test = pad_sequences(X_test,padding='post',maxlen=max_length)
print(X_train[3,:])

num_of_classes = 6
y_train = to_categorical(y_train, num_of_classes)
y_test = to_categorical(y_test, num_of_classes)
print(y_train.shape)
print(y_train[0])

X_train = np.array(X_train).reshape(X_train.shape[0],X_train.shape[1],1)
X_test = np.array(X_test).reshape(X_test.shape[0],X_test.shape[1],1)

print('X train shape', X_train.shape)
print('X test shape', X_test.shape)

num_classes=6
def buildRNN():
    model=Sequential()
    model.add(SimpleRNN(50,input_shape=(max_length,1),return_sequences=False))
    model.add(Dense(num_classes))
    model.add(Activation('Softmax'))
    model.summary()
    adam=optimizers.Adam(lr=0.001)
    model.compile(loss='categorical_crossentropy',optimizer=adam,metrics=['accuracy'])
    return model

model=KerasClassifier(build_fn=buildRNN,epochs=5,batch_size=50)

model.fit(X_train,y_train)

y_pred=model.predict(X_test)
Y_test_=np.argmax(y_test,axis=1)
print("Accuracy of the model is: ",accuracy_score(y_pred,Y_test_))

#Method to feed the new data to predict
def pred_sentiment(str1):
  sent=[str1]
  sent=tokenizer.texts_to_sequences(sent)
  sent=np.array(sent)
  sent=pad_sequences(sent,padding='post',maxlen=max_length)
  sent=np.array(sent).reshape(sent.shape[0],sent.shape[1],1)
  pred=model.predict(np.array(sent))
  print("The rating of the review from 0 to 5 is: ",pred)

pred_sentiment("Perfect for a weekend getaway")

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# jupyter nbconvert --to html /content/Inside_airbnb_finalsolution.ipynb